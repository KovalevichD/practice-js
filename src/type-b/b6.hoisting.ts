/*
 * Задача b6: Опишите различия между var let const и различия между об function declaration и arrow function
 * Подсказка: речь о hoisting'e
 *
 * 1. let и const имеют блочную видимость(видны в блоках if, циклах for например), а var ограничивает лишь функция. let и const нельзя заново переобъявить, то есть повторное объявление
 * с таким же именем приведёт к ошибке. let в цикле создает новую переменную для каждой итерации. Const после создания нельзя перезаписывать, но можно изменять(например присваивать
 * в объект новые свойства)
 * var "всплывает" наверх. То есть в следующем примере не будет ошибки:
 *
 * name = 'Dmitry';
 * var name;
 *
 * Если бы мы так сделали с let и const, то скрипт был бы остановлен ошибкой, мол нельзя использовать переменную до инициализации. Их просто не существует до объявления.
 * С var так происходит вот почему. При запуске скрипта, происходит 2 вещи - инициализация переменных, а потом присваивание. Когда интерпритатор идет по скрипту и видит var, то он сначала
 * инициализирует их как undefined, то есть присваивает всем var name = undefined, а уже потом выполняет присваивание var name = 'Dimasik'.
 *
 *2. То же самое и с function declaration и arrow function. При первом проходе интерпритатора fd инициализируются, а потом сразу же выполняются. Поэтому они доступны в любом месте. Но есть
 *исключение. Если fd находится в блоке {}, то она видна только внутри этого блока.
 * Arrow function не существует до их объявления, как и function expression. Но их можно сделать видимыми внутри блока {}, если их заранее объявить до блока, то есть задать правильную,
 * соответствующую видимость.
 */
